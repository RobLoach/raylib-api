
Defines found: 9

Define 001: RRES_H
  Name: RRES_H
  Type: GUARD
  Value: 
  Description: 
Define 002: RRESAPI
  Name: RRESAPI
  Type: UNKNOWN
  Value: __declspec(dllexport)
  Description: We are building the library as a Win32 shared library (.dll)
Define 003: RRES_MALLOC(sz)
  Name: RRES_MALLOC(sz)
  Type: MACRO
  Value: malloc(sz)
  Description: 
Define 004: RRES_CALLOC(ptr,sz)
  Name: RRES_CALLOC(ptr,sz)
  Type: MACRO
  Value: calloc(ptr,sz)
  Description: 
Define 005: RRES_REALLOC(ptr,sz)
  Name: RRES_REALLOC(ptr,sz)
  Type: MACRO
  Value: realloc(ptr,sz)
  Description: 
Define 006: RRES_FREE(ptr)
  Name: RRES_FREE(ptr)
  Type: MACRO
  Value: free(ptr)
  Description: 
Define 007: RRES_SUPPORT_LOG_INFO
  Name: RRES_SUPPORT_LOG_INFO
  Type: GUARD
  Value: 
  Description: 
Define 008: RRES_LOG(...)
  Name: RRES_LOG(...)
  Type: MACRO
  Value: printf(__VA_ARGS__)
  Description: 
Define 009: RRES_MAX_FILENAME_SIZE
  Name: RRES_MAX_FILENAME_SIZE
  Type: INT
  Value: 1024
  Description: 

Structures found: 8

Struct 01: rresFileHeader (5 fields)
  Name: rresFileHeader
  Description: rres file header (16 bytes)
  Field[1]: unsigned char[4] id // File identifier: rres
  Field[2]: unsigned short version // File version: 100 for version 1.0
  Field[3]: unsigned short chunkCount // Number of resource chunks in the file (MAX: 65535)
  Field[4]: unsigned int cdOffset // Central Directory offset in file (0 if not available)
  Field[5]: unsigned int reserved // <reserved>
Struct 02: rresResourceChunkInfo (10 fields)
  Name: rresResourceChunkInfo
  Description: rres resource chunk info header (32 bytes)
  Field[1]: unsigned char[4] type // Resource chunk type (FourCC)
  Field[2]: unsigned int id // Resource chunk identifier (generated from filename CRC32 hash)
  Field[3]: unsigned char compType // Data compression algorithm
  Field[4]: unsigned char cipherType // Data encription algorithm
  Field[5]: unsigned short flags // Data flags (if required)
  Field[6]: unsigned int packedSize // Data chunk size (compressed/encrypted + custom data appended)
  Field[7]: unsigned int baseSize // Data base size (uncompressed/unencrypted)
  Field[8]: unsigned int nextOffset // Next resource chunk global offset (if resource has multiple chunks)
  Field[9]: unsigned int reserved // <reserved>
  Field[10]: unsigned int crc32 // Data chunk CRC32 (propCount + props[] + data)
Struct 03: rresResourceChunkData (3 fields)
  Name: rresResourceChunkData
  Description: rres resource chunk data
  Field[1]: unsigned int propCount // Resource chunk properties count
  Field[2]: unsigned int * props // Resource chunk properties
  Field[3]: void * raw // Resource chunk raw data
Struct 04: rresResourceChunk (2 fields)
  Name: rresResourceChunk
  Description: rres resource chunk
  Field[1]: rresResourceChunkInfo info // Resource chunk info
  Field[2]: rresResourceChunkData data // Resource chunk packed data, contains propCount, props[] and raw data
Struct 05: rresResourceMulti (2 fields)
  Name: rresResourceMulti
  Description: NOTE: It supports multiple resource chunks
  Field[1]: unsigned int count // Resource chunks count
  Field[2]: rresResourceChunk * chunks // Resource chunks
Struct 06: rresDirEntry (5 fields)
  Name: rresDirEntry
  Description: CDIR: rres central directory entry
  Field[1]: unsigned int id // Resource id
  Field[2]: unsigned int offset // Resource global offset in file
  Field[3]: unsigned int reserved // reserved
  Field[4]: unsigned int fileNameSize // Resource fileName size (NULL terminator and 4-byte alignment padding considered)
  Field[5]: char[RRES_MAX_FILENAME_SIZE] fileName // Resource original fileName (NULL terminated and padded to 4-byte alignment)
Struct 07: rresCentralDir (2 fields)
  Name: rresCentralDir
  Description: NOTE: This data conforms the rresResourceChunkData
  Field[1]: unsigned int count // Central directory entries count
  Field[2]: rresDirEntry * entries // Central directory entries
Struct 08: rresFontGlyphInfo (8 fields)
  Name: rresFontGlyphInfo
  Description: NOTE: And array of this type conforms the rresResourceChunkData
  Field[1]: int x // Glyph rectangle in the atlas image
  Field[2]: int y // Glyph rectangle in the atlas image
  Field[3]: int width // Glyph rectangle in the atlas image
  Field[4]: int height // Glyph rectangle in the atlas image
  Field[5]: int value // Glyph codepoint value
  Field[6]: int offsetX // Glyph drawing offset (from base line)
  Field[7]: int offsetY // Glyph drawing offset (from base line)
  Field[8]: int advanceX // Glyph advance X for next character

Aliases found: 0


Enums found: 0


Callbacks found: 0


Functions found: 13

Function 001: rresLoadResourceChunk() (2 input parameters)
  Name: rresLoadResourceChunk
  Return type: rresResourceChunk
  Description: Load one resource chunk for provided id
  Param[1]: fileName (type: const char *)
  Param[2]: rresId (type: int)
Function 002: rresUnloadResourceChunk() (1 input parameters)
  Name: rresUnloadResourceChunk
  Return type: void
  Description: Unload resource chunk from memory
  Param[1]: chunk (type: rresResourceChunk)
Function 003: rresLoadResourceMulti() (2 input parameters)
  Name: rresLoadResourceMulti
  Return type: rresResourceMulti
  Description: Load resource for provided id (multiple resource chunks)
  Param[1]: fileName (type: const char *)
  Param[2]: rresId (type: int)
Function 004: rresUnloadResourceMulti() (1 input parameters)
  Name: rresUnloadResourceMulti
  Return type: void
  Description: Unload resource from memory (multiple resource chunks)
  Param[1]: multi (type: rresResourceMulti)
Function 005: rresLoadResourceChunkInfo() (2 input parameters)
  Name: rresLoadResourceChunkInfo
  Return type: rresResourceChunkInfo
  Description: Load resource chunk info for provided id
  Param[1]: fileName (type: const char *)
  Param[2]: rresId (type: int)
Function 006: rresLoadResourceChunkInfoAll() (2 input parameters)
  Name: rresLoadResourceChunkInfoAll
  Return type: rresResourceChunkInfo *
  Description: Load all resource chunks info
  Param[1]: fileName (type: const char *)
  Param[2]: chunkCount (type: unsigned int *)
Function 007: rresLoadCentralDirectory() (1 input parameters)
  Name: rresLoadCentralDirectory
  Return type: rresCentralDir
  Description: Load central directory resource chunk from file
  Param[1]: fileName (type: const char *)
Function 008: rresUnloadCentralDirectory() (1 input parameters)
  Name: rresUnloadCentralDirectory
  Return type: void
  Description: Unload central directory resource chunk
  Param[1]: dir (type: rresCentralDir)
Function 009: rresGetDataType() (1 input parameters)
  Name: rresGetDataType
  Return type: unsigned int
  Description: Get rresResourceDataType from FourCC code
  Param[1]: fourCC (type: const unsigned char *)
Function 010: rresGetResourceId() (2 input parameters)
  Name: rresGetResourceId
  Return type: int
  Description: Get resource id for a provided filename
  Param[1]: dir (type: rresCentralDir)
  Param[2]: fileName (type: const char *)
Function 011: rresComputeCRC32() (2 input parameters)
  Name: rresComputeCRC32
  Return type: unsigned int
  Description: Compute CRC32 for provided data
  Param[1]: data (type: const unsigned char *)
  Param[2]: len (type: int)
Function 012: rresSetCipherPassword() (1 input parameters)
  Name: rresSetCipherPassword
  Return type: void
  Description: Set password to be used on data decryption
  Param[1]: pass (type: const char *)
Function 013: rresGetCipherPassword() (0 input parameters)
  Name: rresGetCipherPassword
  Return type: const char *
  Description: Get password to be used on data decryption
  No input parameters
