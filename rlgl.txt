
Defines found: 98

Define 001: RLGL_H
  Name: RLGL_H
  Type: GUARD
  Value: 
  Description: 
Define 002: RLGL_VERSION
  Name: RLGL_VERSION
  Type: STRING
  Value: "5.0"
  Description: 
Define 003: RLAPI
  Name: RLAPI
  Type: UNKNOWN
  Value: __declspec(dllexport)
  Description: We are building the library as a Win32 shared library (.dll)
Define 004: TRACELOG(level, ...)
  Name: TRACELOG(level, ...)
  Type: MACRO
  Value: (void)0
  Description: 
Define 005: TRACELOGD(...)
  Name: TRACELOGD(...)
  Type: MACRO
  Value: (void)0
  Description: 
Define 006: RL_MALLOC(sz)
  Name: RL_MALLOC(sz)
  Type: MACRO
  Value: malloc(sz)
  Description: 
Define 007: RL_CALLOC(n,sz)
  Name: RL_CALLOC(n,sz)
  Type: MACRO
  Value: calloc(n,sz)
  Description: 
Define 008: RL_REALLOC(n,sz)
  Name: RL_REALLOC(n,sz)
  Type: MACRO
  Value: realloc(n,sz)
  Description: 
Define 009: RL_FREE(p)
  Name: RL_FREE(p)
  Type: MACRO
  Value: free(p)
  Description: 
Define 010: GRAPHICS_API_OPENGL_33
  Name: GRAPHICS_API_OPENGL_33
  Type: GUARD
  Value: 
  Description: 
Define 011: GRAPHICS_API_OPENGL_ES2
  Name: GRAPHICS_API_OPENGL_ES2
  Type: GUARD
  Value: 
  Description: 
Define 012: RLGL_RENDER_TEXTURES_HINT
  Name: RLGL_RENDER_TEXTURES_HINT
  Type: GUARD
  Value: 
  Description: 
Define 013: RL_DEFAULT_BATCH_BUFFER_ELEMENTS
  Name: RL_DEFAULT_BATCH_BUFFER_ELEMENTS
  Type: INT
  Value: 8192
  Description: 
Define 014: RL_DEFAULT_BATCH_BUFFERS
  Name: RL_DEFAULT_BATCH_BUFFERS
  Type: INT
  Value: 1
  Description: Default number of batch buffers (multi-buffering)
Define 015: RL_DEFAULT_BATCH_DRAWCALLS
  Name: RL_DEFAULT_BATCH_DRAWCALLS
  Type: INT
  Value: 256
  Description: Default number of batch draw calls (by state changes: mode, texture)
Define 016: RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS
  Name: RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS
  Type: INT
  Value: 4
  Description: Maximum number of textures units that can be activated on batch drawing (SetShaderValueTexture())
Define 017: RL_MAX_MATRIX_STACK_SIZE
  Name: RL_MAX_MATRIX_STACK_SIZE
  Type: INT
  Value: 32
  Description: Maximum size of Matrix stack
Define 018: RL_MAX_SHADER_LOCATIONS
  Name: RL_MAX_SHADER_LOCATIONS
  Type: INT
  Value: 32
  Description: Maximum number of shader locations supported
Define 019: RL_CULL_DISTANCE_NEAR
  Name: RL_CULL_DISTANCE_NEAR
  Type: DOUBLE
  Value: 0.01
  Description: Default near cull distance
Define 020: RL_CULL_DISTANCE_FAR
  Name: RL_CULL_DISTANCE_FAR
  Type: DOUBLE
  Value: 1000.0
  Description: Default far cull distance
Define 021: RL_TEXTURE_WRAP_S
  Name: RL_TEXTURE_WRAP_S
  Type: INT
  Value: 0x2802
  Description: GL_TEXTURE_WRAP_S
Define 022: RL_TEXTURE_WRAP_T
  Name: RL_TEXTURE_WRAP_T
  Type: INT
  Value: 0x2803
  Description: GL_TEXTURE_WRAP_T
Define 023: RL_TEXTURE_MAG_FILTER
  Name: RL_TEXTURE_MAG_FILTER
  Type: INT
  Value: 0x2800
  Description: GL_TEXTURE_MAG_FILTER
Define 024: RL_TEXTURE_MIN_FILTER
  Name: RL_TEXTURE_MIN_FILTER
  Type: INT
  Value: 0x2801
  Description: GL_TEXTURE_MIN_FILTER
Define 025: RL_TEXTURE_FILTER_NEAREST
  Name: RL_TEXTURE_FILTER_NEAREST
  Type: INT
  Value: 0x2600
  Description: GL_NEAREST
Define 026: RL_TEXTURE_FILTER_LINEAR
  Name: RL_TEXTURE_FILTER_LINEAR
  Type: INT
  Value: 0x2601
  Description: GL_LINEAR
Define 027: RL_TEXTURE_FILTER_MIP_NEAREST
  Name: RL_TEXTURE_FILTER_MIP_NEAREST
  Type: INT
  Value: 0x2700
  Description: GL_NEAREST_MIPMAP_NEAREST
Define 028: RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR
  Name: RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR
  Type: INT
  Value: 0x2702
  Description: GL_NEAREST_MIPMAP_LINEAR
Define 029: RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST
  Name: RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST
  Type: INT
  Value: 0x2701
  Description: GL_LINEAR_MIPMAP_NEAREST
Define 030: RL_TEXTURE_FILTER_MIP_LINEAR
  Name: RL_TEXTURE_FILTER_MIP_LINEAR
  Type: INT
  Value: 0x2703
  Description: GL_LINEAR_MIPMAP_LINEAR
Define 031: RL_TEXTURE_FILTER_ANISOTROPIC
  Name: RL_TEXTURE_FILTER_ANISOTROPIC
  Type: INT
  Value: 0x3000
  Description: Anisotropic filter (custom identifier)
Define 032: RL_TEXTURE_MIPMAP_BIAS_RATIO
  Name: RL_TEXTURE_MIPMAP_BIAS_RATIO
  Type: INT
  Value: 0x4000
  Description: Texture mipmap bias, percentage ratio (custom identifier)
Define 033: RL_TEXTURE_WRAP_REPEAT
  Name: RL_TEXTURE_WRAP_REPEAT
  Type: INT
  Value: 0x2901
  Description: GL_REPEAT
Define 034: RL_TEXTURE_WRAP_CLAMP
  Name: RL_TEXTURE_WRAP_CLAMP
  Type: INT
  Value: 0x812F
  Description: GL_CLAMP_TO_EDGE
Define 035: RL_TEXTURE_WRAP_MIRROR_REPEAT
  Name: RL_TEXTURE_WRAP_MIRROR_REPEAT
  Type: INT
  Value: 0x8370
  Description: GL_MIRRORED_REPEAT
Define 036: RL_TEXTURE_WRAP_MIRROR_CLAMP
  Name: RL_TEXTURE_WRAP_MIRROR_CLAMP
  Type: INT
  Value: 0x8742
  Description: GL_MIRROR_CLAMP_EXT
Define 037: RL_MODELVIEW
  Name: RL_MODELVIEW
  Type: INT
  Value: 0x1700
  Description: GL_MODELVIEW
Define 038: RL_PROJECTION
  Name: RL_PROJECTION
  Type: INT
  Value: 0x1701
  Description: GL_PROJECTION
Define 039: RL_TEXTURE
  Name: RL_TEXTURE
  Type: INT
  Value: 0x1702
  Description: GL_TEXTURE
Define 040: RL_LINES
  Name: RL_LINES
  Type: INT
  Value: 0x0001
  Description: GL_LINES
Define 041: RL_TRIANGLES
  Name: RL_TRIANGLES
  Type: INT
  Value: 0x0004
  Description: GL_TRIANGLES
Define 042: RL_QUADS
  Name: RL_QUADS
  Type: INT
  Value: 0x0007
  Description: GL_QUADS
Define 043: RL_UNSIGNED_BYTE
  Name: RL_UNSIGNED_BYTE
  Type: INT
  Value: 0x1401
  Description: GL_UNSIGNED_BYTE
Define 044: RL_FLOAT
  Name: RL_FLOAT
  Type: INT
  Value: 0x1406
  Description: GL_FLOAT
Define 045: RL_STREAM_DRAW
  Name: RL_STREAM_DRAW
  Type: INT
  Value: 0x88E0
  Description: GL_STREAM_DRAW
Define 046: RL_STREAM_READ
  Name: RL_STREAM_READ
  Type: INT
  Value: 0x88E1
  Description: GL_STREAM_READ
Define 047: RL_STREAM_COPY
  Name: RL_STREAM_COPY
  Type: INT
  Value: 0x88E2
  Description: GL_STREAM_COPY
Define 048: RL_STATIC_DRAW
  Name: RL_STATIC_DRAW
  Type: INT
  Value: 0x88E4
  Description: GL_STATIC_DRAW
Define 049: RL_STATIC_READ
  Name: RL_STATIC_READ
  Type: INT
  Value: 0x88E5
  Description: GL_STATIC_READ
Define 050: RL_STATIC_COPY
  Name: RL_STATIC_COPY
  Type: INT
  Value: 0x88E6
  Description: GL_STATIC_COPY
Define 051: RL_DYNAMIC_DRAW
  Name: RL_DYNAMIC_DRAW
  Type: INT
  Value: 0x88E8
  Description: GL_DYNAMIC_DRAW
Define 052: RL_DYNAMIC_READ
  Name: RL_DYNAMIC_READ
  Type: INT
  Value: 0x88E9
  Description: GL_DYNAMIC_READ
Define 053: RL_DYNAMIC_COPY
  Name: RL_DYNAMIC_COPY
  Type: INT
  Value: 0x88EA
  Description: GL_DYNAMIC_COPY
Define 054: RL_FRAGMENT_SHADER
  Name: RL_FRAGMENT_SHADER
  Type: INT
  Value: 0x8B30
  Description: GL_FRAGMENT_SHADER
Define 055: RL_VERTEX_SHADER
  Name: RL_VERTEX_SHADER
  Type: INT
  Value: 0x8B31
  Description: GL_VERTEX_SHADER
Define 056: RL_COMPUTE_SHADER
  Name: RL_COMPUTE_SHADER
  Type: INT
  Value: 0x91B9
  Description: GL_COMPUTE_SHADER
Define 057: RL_ZERO
  Name: RL_ZERO
  Type: INT
  Value: 0
  Description: GL_ZERO
Define 058: RL_ONE
  Name: RL_ONE
  Type: INT
  Value: 1
  Description: GL_ONE
Define 059: RL_SRC_COLOR
  Name: RL_SRC_COLOR
  Type: INT
  Value: 0x0300
  Description: GL_SRC_COLOR
Define 060: RL_ONE_MINUS_SRC_COLOR
  Name: RL_ONE_MINUS_SRC_COLOR
  Type: INT
  Value: 0x0301
  Description: GL_ONE_MINUS_SRC_COLOR
Define 061: RL_SRC_ALPHA
  Name: RL_SRC_ALPHA
  Type: INT
  Value: 0x0302
  Description: GL_SRC_ALPHA
Define 062: RL_ONE_MINUS_SRC_ALPHA
  Name: RL_ONE_MINUS_SRC_ALPHA
  Type: INT
  Value: 0x0303
  Description: GL_ONE_MINUS_SRC_ALPHA
Define 063: RL_DST_ALPHA
  Name: RL_DST_ALPHA
  Type: INT
  Value: 0x0304
  Description: GL_DST_ALPHA
Define 064: RL_ONE_MINUS_DST_ALPHA
  Name: RL_ONE_MINUS_DST_ALPHA
  Type: INT
  Value: 0x0305
  Description: GL_ONE_MINUS_DST_ALPHA
Define 065: RL_DST_COLOR
  Name: RL_DST_COLOR
  Type: INT
  Value: 0x0306
  Description: GL_DST_COLOR
Define 066: RL_ONE_MINUS_DST_COLOR
  Name: RL_ONE_MINUS_DST_COLOR
  Type: INT
  Value: 0x0307
  Description: GL_ONE_MINUS_DST_COLOR
Define 067: RL_SRC_ALPHA_SATURATE
  Name: RL_SRC_ALPHA_SATURATE
  Type: INT
  Value: 0x0308
  Description: GL_SRC_ALPHA_SATURATE
Define 068: RL_CONSTANT_COLOR
  Name: RL_CONSTANT_COLOR
  Type: INT
  Value: 0x8001
  Description: GL_CONSTANT_COLOR
Define 069: RL_ONE_MINUS_CONSTANT_COLOR
  Name: RL_ONE_MINUS_CONSTANT_COLOR
  Type: INT
  Value: 0x8002
  Description: GL_ONE_MINUS_CONSTANT_COLOR
Define 070: RL_CONSTANT_ALPHA
  Name: RL_CONSTANT_ALPHA
  Type: INT
  Value: 0x8003
  Description: GL_CONSTANT_ALPHA
Define 071: RL_ONE_MINUS_CONSTANT_ALPHA
  Name: RL_ONE_MINUS_CONSTANT_ALPHA
  Type: INT
  Value: 0x8004
  Description: GL_ONE_MINUS_CONSTANT_ALPHA
Define 072: RL_FUNC_ADD
  Name: RL_FUNC_ADD
  Type: INT
  Value: 0x8006
  Description: GL_FUNC_ADD
Define 073: RL_MIN
  Name: RL_MIN
  Type: INT
  Value: 0x8007
  Description: GL_MIN
Define 074: RL_MAX
  Name: RL_MAX
  Type: INT
  Value: 0x8008
  Description: GL_MAX
Define 075: RL_FUNC_SUBTRACT
  Name: RL_FUNC_SUBTRACT
  Type: INT
  Value: 0x800A
  Description: GL_FUNC_SUBTRACT
Define 076: RL_FUNC_REVERSE_SUBTRACT
  Name: RL_FUNC_REVERSE_SUBTRACT
  Type: INT
  Value: 0x800B
  Description: GL_FUNC_REVERSE_SUBTRACT
Define 077: RL_BLEND_EQUATION
  Name: RL_BLEND_EQUATION
  Type: INT
  Value: 0x8009
  Description: GL_BLEND_EQUATION
Define 078: RL_BLEND_EQUATION_RGB
  Name: RL_BLEND_EQUATION_RGB
  Type: INT
  Value: 0x8009
  Description: GL_BLEND_EQUATION_RGB   // (Same as BLEND_EQUATION)
Define 079: RL_BLEND_EQUATION_ALPHA
  Name: RL_BLEND_EQUATION_ALPHA
  Type: INT
  Value: 0x883D
  Description: GL_BLEND_EQUATION_ALPHA
Define 080: RL_BLEND_DST_RGB
  Name: RL_BLEND_DST_RGB
  Type: INT
  Value: 0x80C8
  Description: GL_BLEND_DST_RGB
Define 081: RL_BLEND_SRC_RGB
  Name: RL_BLEND_SRC_RGB
  Type: INT
  Value: 0x80C9
  Description: GL_BLEND_SRC_RGB
Define 082: RL_BLEND_DST_ALPHA
  Name: RL_BLEND_DST_ALPHA
  Type: INT
  Value: 0x80CA
  Description: GL_BLEND_DST_ALPHA
Define 083: RL_BLEND_SRC_ALPHA
  Name: RL_BLEND_SRC_ALPHA
  Type: INT
  Value: 0x80CB
  Description: GL_BLEND_SRC_ALPHA
Define 084: RL_BLEND_COLOR
  Name: RL_BLEND_COLOR
  Type: INT
  Value: 0x8005
  Description: GL_BLEND_COLOR
Define 085: RL_READ_FRAMEBUFFER
  Name: RL_READ_FRAMEBUFFER
  Type: INT
  Value: 0x8CA8
  Description: GL_READ_FRAMEBUFFER
Define 086: RL_DRAW_FRAMEBUFFER
  Name: RL_DRAW_FRAMEBUFFER
  Type: INT
  Value: 0x8CA9
  Description: GL_DRAW_FRAMEBUFFER
Define 087: RL_DEFAULT_SHADER_ATTRIB_LOCATION_POSITION
  Name: RL_DEFAULT_SHADER_ATTRIB_LOCATION_POSITION
  Type: INT
  Value: 0
  Description: 
Define 088: RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD
  Name: RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD
  Type: INT
  Value: 1
  Description: 
Define 089: RL_DEFAULT_SHADER_ATTRIB_LOCATION_NORMAL
  Name: RL_DEFAULT_SHADER_ATTRIB_LOCATION_NORMAL
  Type: INT
  Value: 2
  Description: 
Define 090: RL_DEFAULT_SHADER_ATTRIB_LOCATION_COLOR
  Name: RL_DEFAULT_SHADER_ATTRIB_LOCATION_COLOR
  Type: INT
  Value: 3
  Description: 
Define 091: RL_DEFAULT_SHADER_ATTRIB_LOCATION_TANGENT
  Name: RL_DEFAULT_SHADER_ATTRIB_LOCATION_TANGENT
  Type: INT
  Value: 4
  Description: 
Define 092: RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD2
  Name: RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD2
  Type: INT
  Value: 5
  Description: 
Define 093: RL_DEFAULT_SHADER_ATTRIB_LOCATION_INDICES
  Name: RL_DEFAULT_SHADER_ATTRIB_LOCATION_INDICES
  Type: INT
  Value: 6
  Description: 
Define 094: RL_DEFAULT_SHADER_ATTRIB_LOCATION_BONEIDS
  Name: RL_DEFAULT_SHADER_ATTRIB_LOCATION_BONEIDS
  Type: INT
  Value: 7
  Description: 
Define 095: RL_DEFAULT_SHADER_ATTRIB_LOCATION_BONEWEIGHTS
  Name: RL_DEFAULT_SHADER_ATTRIB_LOCATION_BONEWEIGHTS
  Type: INT
  Value: 8
  Description: 
Define 096: RL_MATRIX_TYPE
  Name: RL_MATRIX_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 097: RL_SHADER_LOC_MAP_DIFFUSE
  Name: RL_SHADER_LOC_MAP_DIFFUSE
  Type: UNKNOWN
  Value: RL_SHADER_LOC_MAP_ALBEDO
  Description: 
Define 098: RL_SHADER_LOC_MAP_SPECULAR
  Name: RL_SHADER_LOC_MAP_SPECULAR
  Type: UNKNOWN
  Value: RL_SHADER_LOC_MAP_METALNESS
  Description: 

Structures found: 4

Struct 01: Matrix (16 fields)
  Name: Matrix
  Description: Matrix, 4x4 components, column major, OpenGL style, right handed
  Field[1]: float m0 // Matrix first row (4 components)
  Field[2]: float m4 // Matrix first row (4 components)
  Field[3]: float m8 // Matrix first row (4 components)
  Field[4]: float m12 // Matrix first row (4 components)
  Field[5]: float m1 // Matrix second row (4 components)
  Field[6]: float m5 // Matrix second row (4 components)
  Field[7]: float m9 // Matrix second row (4 components)
  Field[8]: float m13 // Matrix second row (4 components)
  Field[9]: float m2 // Matrix third row (4 components)
  Field[10]: float m6 // Matrix third row (4 components)
  Field[11]: float m10 // Matrix third row (4 components)
  Field[12]: float m14 // Matrix third row (4 components)
  Field[13]: float m3 // Matrix fourth row (4 components)
  Field[14]: float m7 // Matrix fourth row (4 components)
  Field[15]: float m11 // Matrix fourth row (4 components)
  Field[16]: float m15 // Matrix fourth row (4 components)
Struct 02: rlVertexBuffer (13 fields)
  Name: rlVertexBuffer
  Description: Dynamic vertex buffers (position + texcoords + colors + indices arrays)
  Field[1]: int elementCount // Number of elements in the buffer (QUADS)
  Field[2]: float * vertices // Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
  Field[3]: float * texcoords // Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
  Field[4]: float * normals // Vertex normal (XYZ - 3 components per vertex) (shader-location = 2)
  Field[5]: unsigned char * colors // Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
  Field[6]: #if defined(GRAPHICS_API_OPENGL_11) || defined(GRAPHICS_API_OPENunsigned int * indices // Vertex indices (in case vertex data comes indexed) (6 indices per quad)
  Field[7]: unsigned int * indices // Vertex indices (in case vertex data comes indexed) (6 indices per quad)
  Field[8]: #endif indices // Vertex indices (in case vertex data comes indexed) (6 indices per quad)
  Field[9]: #if defined(GRAPHICS_API_OPENGL_ES2) indices // Vertex indices (in case vertex data comes indexed) (6 indices per quad)
  Field[10]: unsigned short * indices // Vertex indices (in case vertex data comes indexed) (6 indices per quad)
  Field[11]: #endif vaoId // OpenGL Vertex Array Object id
  Field[12]: unsigned int vaoId // OpenGL Vertex Array Object id
  Field[13]: unsigned int[5] vboId // OpenGL Vertex Buffer Objects id (5 types of vertex data)
Struct 03: rlDrawCall (4 fields)
  Name: rlDrawCall
  Description: of those state-change happens (this is done in core module)
  Field[1]: int mode // Drawing mode: LINES, TRIANGLES, QUADS
  Field[2]: int vertexCount // Number of vertex of the draw
  Field[3]: int vertexAlignment // Number of vertex required for index alignment (LINES, TRIANGLES)
  Field[4]: unsigned int textureId // Texture id to be used on the draw -> Use to create new draw call if changes
Struct 04: rlRenderBatch (6 fields)
  Name: rlRenderBatch
  Description: rlRenderBatch type
  Field[1]: int bufferCount // Number of vertex buffers (multi-buffering support)
  Field[2]: int currentBuffer // Current buffer tracking in case of multi-buffering
  Field[3]: rlVertexBuffer * vertexBuffer // Dynamic buffer(s) for vertex data
  Field[4]: rlDrawCall * draws // Draw calls array, depends on textureId
  Field[5]: int drawCounter // Draw calls counter
  Field[6]: float currentDepth // Current depth value for next draw

Aliases found: 0


Enums found: 11

Enum 01: rlGlVersion (6 values)
  Name: rlGlVersion
  Description: OpenGL version
  Value[RL_OPENGL_11]: 1
  Value[RL_OPENGL_21]: 2
  Value[RL_OPENGL_33]: 3
  Value[RL_OPENGL_43]: 4
  Value[RL_OPENGL_ES_20]: 5
  Value[RL_OPENGL_ES_30]: 6
Enum 02: rlTraceLogLevel (8 values)
  Name: rlTraceLogLevel
  Description: Trace log level
  Value[RL_LOG_ALL]: 0
  Value[RL_LOG_TRACE]: 1
  Value[RL_LOG_DEBUG]: 2
  Value[RL_LOG_INFO]: 3
  Value[RL_LOG_WARNING]: 4
  Value[RL_LOG_ERROR]: 5
  Value[RL_LOG_FATAL]: 6
  Value[RL_LOG_NONE]: 7
Enum 03: rlPixelFormat (24 values)
  Name: rlPixelFormat
  Description: Texture pixel formats
  Value[RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE]: 1
  Value[RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA]: 2
  Value[RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5]: 3
  Value[RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8]: 4
  Value[RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1]: 5
  Value[RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4]: 6
  Value[RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8]: 7
  Value[RL_PIXELFORMAT_UNCOMPRESSED_R32]: 8
  Value[RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32]: 9
  Value[RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32]: 10
  Value[RL_PIXELFORMAT_UNCOMPRESSED_R16]: 11
  Value[RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16]: 12
  Value[RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16]: 13
  Value[RL_PIXELFORMAT_COMPRESSED_DXT1_RGB]: 14
  Value[RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA]: 15
  Value[RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA]: 16
  Value[RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA]: 17
  Value[RL_PIXELFORMAT_COMPRESSED_ETC1_RGB]: 18
  Value[RL_PIXELFORMAT_COMPRESSED_ETC2_RGB]: 19
  Value[RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA]: 20
  Value[RL_PIXELFORMAT_COMPRESSED_PVRT_RGB]: 21
  Value[RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA]: 22
  Value[RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA]: 23
  Value[RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA]: 24
Enum 04: rlTextureFilter (6 values)
  Name: rlTextureFilter
  Description: Texture parameters: filter mode
  Value[RL_TEXTURE_FILTER_POINT]: 0
  Value[RL_TEXTURE_FILTER_BILINEAR]: 1
  Value[RL_TEXTURE_FILTER_TRILINEAR]: 2
  Value[RL_TEXTURE_FILTER_ANISOTROPIC_4X]: 3
  Value[RL_TEXTURE_FILTER_ANISOTROPIC_8X]: 4
  Value[RL_TEXTURE_FILTER_ANISOTROPIC_16X]: 5
Enum 05: rlBlendMode (8 values)
  Name: rlBlendMode
  Description: Color blending modes (pre-defined)
  Value[RL_BLEND_ALPHA]: 0
  Value[RL_BLEND_ADDITIVE]: 1
  Value[RL_BLEND_MULTIPLIED]: 2
  Value[RL_BLEND_ADD_COLORS]: 3
  Value[RL_BLEND_SUBTRACT_COLORS]: 4
  Value[RL_BLEND_ALPHA_PREMULTIPLY]: 5
  Value[RL_BLEND_CUSTOM]: 6
  Value[RL_BLEND_CUSTOM_SEPARATE]: 7
Enum 06: rlShaderLocationIndex (26 values)
  Name: rlShaderLocationIndex
  Description: Shader location point type
  Value[RL_SHADER_LOC_VERTEX_POSITION]: 0
  Value[RL_SHADER_LOC_VERTEX_TEXCOORD01]: 1
  Value[RL_SHADER_LOC_VERTEX_TEXCOORD02]: 2
  Value[RL_SHADER_LOC_VERTEX_NORMAL]: 3
  Value[RL_SHADER_LOC_VERTEX_TANGENT]: 4
  Value[RL_SHADER_LOC_VERTEX_COLOR]: 5
  Value[RL_SHADER_LOC_MATRIX_MVP]: 6
  Value[RL_SHADER_LOC_MATRIX_VIEW]: 7
  Value[RL_SHADER_LOC_MATRIX_PROJECTION]: 8
  Value[RL_SHADER_LOC_MATRIX_MODEL]: 9
  Value[RL_SHADER_LOC_MATRIX_NORMAL]: 10
  Value[RL_SHADER_LOC_VECTOR_VIEW]: 11
  Value[RL_SHADER_LOC_COLOR_DIFFUSE]: 12
  Value[RL_SHADER_LOC_COLOR_SPECULAR]: 13
  Value[RL_SHADER_LOC_COLOR_AMBIENT]: 14
  Value[RL_SHADER_LOC_MAP_ALBEDO]: 15
  Value[RL_SHADER_LOC_MAP_METALNESS]: 16
  Value[RL_SHADER_LOC_MAP_NORMAL]: 17
  Value[RL_SHADER_LOC_MAP_ROUGHNESS]: 18
  Value[RL_SHADER_LOC_MAP_OCCLUSION]: 19
  Value[RL_SHADER_LOC_MAP_EMISSION]: 20
  Value[RL_SHADER_LOC_MAP_HEIGHT]: 21
  Value[RL_SHADER_LOC_MAP_CUBEMAP]: 22
  Value[RL_SHADER_LOC_MAP_IRRADIANCE]: 23
  Value[RL_SHADER_LOC_MAP_PREFILTER]: 24
  Value[RL_SHADER_LOC_MAP_BRDF]: 25
Enum 07: rlShaderUniformDataType (13 values)
  Name: rlShaderUniformDataType
  Description: Shader uniform data type
  Value[RL_SHADER_UNIFORM_FLOAT]: 0
  Value[RL_SHADER_UNIFORM_VEC2]: 1
  Value[RL_SHADER_UNIFORM_VEC3]: 2
  Value[RL_SHADER_UNIFORM_VEC4]: 3
  Value[RL_SHADER_UNIFORM_INT]: 4
  Value[RL_SHADER_UNIFORM_IVEC2]: 5
  Value[RL_SHADER_UNIFORM_IVEC3]: 6
  Value[RL_SHADER_UNIFORM_IVEC4]: 7
  Value[RL_SHADER_UNIFORM_UINT]: 8
  Value[RL_SHADER_UNIFORM_UIVEC2]: 9
  Value[RL_SHADER_UNIFORM_UIVEC3]: 10
  Value[RL_SHADER_UNIFORM_UIVEC4]: 11
  Value[RL_SHADER_UNIFORM_SAMPLER2D]: 12
Enum 08: rlShaderAttributeDataType (4 values)
  Name: rlShaderAttributeDataType
  Description: Shader attribute data types
  Value[RL_SHADER_ATTRIB_FLOAT]: 0
  Value[RL_SHADER_ATTRIB_VEC2]: 1
  Value[RL_SHADER_ATTRIB_VEC3]: 2
  Value[RL_SHADER_ATTRIB_VEC4]: 3
Enum 09: rlFramebufferAttachType (10 values)
  Name: rlFramebufferAttachType
  Description: Framebuffer attachment type
  Value[RL_ATTACHMENT_COLOR_CHANNEL0]: 0
  Value[RL_ATTACHMENT_COLOR_CHANNEL1]: 1
  Value[RL_ATTACHMENT_COLOR_CHANNEL2]: 2
  Value[RL_ATTACHMENT_COLOR_CHANNEL3]: 3
  Value[RL_ATTACHMENT_COLOR_CHANNEL4]: 4
  Value[RL_ATTACHMENT_COLOR_CHANNEL5]: 5
  Value[RL_ATTACHMENT_COLOR_CHANNEL6]: 6
  Value[RL_ATTACHMENT_COLOR_CHANNEL7]: 7
  Value[RL_ATTACHMENT_DEPTH]: 100
  Value[RL_ATTACHMENT_STENCIL]: 200
Enum 10: rlFramebufferAttachTextureType (8 values)
  Name: rlFramebufferAttachTextureType
  Description: Framebuffer texture attachment type
  Value[RL_ATTACHMENT_CUBEMAP_POSITIVE_X]: 0
  Value[RL_ATTACHMENT_CUBEMAP_NEGATIVE_X]: 1
  Value[RL_ATTACHMENT_CUBEMAP_POSITIVE_Y]: 2
  Value[RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y]: 3
  Value[RL_ATTACHMENT_CUBEMAP_POSITIVE_Z]: 4
  Value[RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z]: 5
  Value[RL_ATTACHMENT_TEXTURE2D]: 100
  Value[RL_ATTACHMENT_RENDERBUFFER]: 200
Enum 11: rlCullMode (2 values)
  Name: rlCullMode
  Description: Face culling mode
  Value[RL_CULL_FACE_FRONT]: 0
  Value[RL_CULL_FACE_BACK]: 1

Callbacks found: 0


Functions found: 156

Function 001: rlMatrixMode() (1 input parameters)
  Name: rlMatrixMode
  Return type: void
  Description: Choose the current matrix to be transformed
  Param[1]: mode (type: int)
Function 002: rlPushMatrix() (0 input parameters)
  Name: rlPushMatrix
  Return type: void
  Description: Push the current matrix to stack
  No input parameters
Function 003: rlPopMatrix() (0 input parameters)
  Name: rlPopMatrix
  Return type: void
  Description: Pop latest inserted matrix from stack
  No input parameters
Function 004: rlLoadIdentity() (0 input parameters)
  Name: rlLoadIdentity
  Return type: void
  Description: Reset current matrix to identity matrix
  No input parameters
Function 005: rlTranslatef() (3 input parameters)
  Name: rlTranslatef
  Return type: void
  Description: Multiply the current matrix by a translation matrix
  Param[1]: x (type: float)
  Param[2]: y (type: float)
  Param[3]: z (type: float)
Function 006: rlRotatef() (4 input parameters)
  Name: rlRotatef
  Return type: void
  Description: Multiply the current matrix by a rotation matrix
  Param[1]: angle (type: float)
  Param[2]: x (type: float)
  Param[3]: y (type: float)
  Param[4]: z (type: float)
Function 007: rlScalef() (3 input parameters)
  Name: rlScalef
  Return type: void
  Description: Multiply the current matrix by a scaling matrix
  Param[1]: x (type: float)
  Param[2]: y (type: float)
  Param[3]: z (type: float)
Function 008: rlMultMatrixf() (1 input parameters)
  Name: rlMultMatrixf
  Return type: void
  Description: Multiply the current matrix by another matrix
  Param[1]: matf (type: const float *)
Function 009: rlFrustum() (6 input parameters)
  Name: rlFrustum
  Return type: void
  Description: 
  Param[1]: left (type: double)
  Param[2]: right (type: double)
  Param[3]: bottom (type: double)
  Param[4]: top (type: double)
  Param[5]: znear (type: double)
  Param[6]: zfar (type: double)
Function 010: rlOrtho() (6 input parameters)
  Name: rlOrtho
  Return type: void
  Description: 
  Param[1]: left (type: double)
  Param[2]: right (type: double)
  Param[3]: bottom (type: double)
  Param[4]: top (type: double)
  Param[5]: znear (type: double)
  Param[6]: zfar (type: double)
Function 011: rlViewport() (4 input parameters)
  Name: rlViewport
  Return type: void
  Description: Set the viewport area
  Param[1]: x (type: int)
  Param[2]: y (type: int)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
Function 012: rlSetClipPlanes() (2 input parameters)
  Name: rlSetClipPlanes
  Return type: void
  Description: Set clip planes distances
  Param[1]: nearPlane (type: double)
  Param[2]: farPlane (type: double)
Function 013: rlGetCullDistanceNear() (0 input parameters)
  Name: rlGetCullDistanceNear
  Return type: double
  Description: Get cull plane distance near
  No input parameters
Function 014: rlGetCullDistanceFar() (0 input parameters)
  Name: rlGetCullDistanceFar
  Return type: double
  Description: Get cull plane distance far
  No input parameters
Function 015: rlBegin() (1 input parameters)
  Name: rlBegin
  Return type: void
  Description: Initialize drawing mode (how to organize vertex)
  Param[1]: mode (type: int)
Function 016: rlEnd() (0 input parameters)
  Name: rlEnd
  Return type: void
  Description: Finish vertex providing
  No input parameters
Function 017: rlVertex2i() (2 input parameters)
  Name: rlVertex2i
  Return type: void
  Description: Define one vertex (position) - 2 int
  Param[1]: x (type: int)
  Param[2]: y (type: int)
Function 018: rlVertex2f() (2 input parameters)
  Name: rlVertex2f
  Return type: void
  Description: Define one vertex (position) - 2 float
  Param[1]: x (type: float)
  Param[2]: y (type: float)
Function 019: rlVertex3f() (3 input parameters)
  Name: rlVertex3f
  Return type: void
  Description: Define one vertex (position) - 3 float
  Param[1]: x (type: float)
  Param[2]: y (type: float)
  Param[3]: z (type: float)
Function 020: rlTexCoord2f() (2 input parameters)
  Name: rlTexCoord2f
  Return type: void
  Description: Define one vertex (texture coordinate) - 2 float
  Param[1]: x (type: float)
  Param[2]: y (type: float)
Function 021: rlNormal3f() (3 input parameters)
  Name: rlNormal3f
  Return type: void
  Description: Define one vertex (normal) - 3 float
  Param[1]: x (type: float)
  Param[2]: y (type: float)
  Param[3]: z (type: float)
Function 022: rlColor4ub() (4 input parameters)
  Name: rlColor4ub
  Return type: void
  Description: Define one vertex (color) - 4 byte
  Param[1]: r (type: unsigned char)
  Param[2]: g (type: unsigned char)
  Param[3]: b (type: unsigned char)
  Param[4]: a (type: unsigned char)
Function 023: rlColor3f() (3 input parameters)
  Name: rlColor3f
  Return type: void
  Description: Define one vertex (color) - 3 float
  Param[1]: x (type: float)
  Param[2]: y (type: float)
  Param[3]: z (type: float)
Function 024: rlColor4f() (4 input parameters)
  Name: rlColor4f
  Return type: void
  Description: Define one vertex (color) - 4 float
  Param[1]: x (type: float)
  Param[2]: y (type: float)
  Param[3]: z (type: float)
  Param[4]: w (type: float)
Function 025: rlEnableVertexArray() (1 input parameters)
  Name: rlEnableVertexArray
  Return type: bool
  Description: Enable vertex array (VAO, if supported)
  Param[1]: vaoId (type: unsigned int)
Function 026: rlDisableVertexArray() (0 input parameters)
  Name: rlDisableVertexArray
  Return type: void
  Description: Disable vertex array (VAO, if supported)
  No input parameters
Function 027: rlEnableVertexBuffer() (1 input parameters)
  Name: rlEnableVertexBuffer
  Return type: void
  Description: Enable vertex buffer (VBO)
  Param[1]: id (type: unsigned int)
Function 028: rlDisableVertexBuffer() (0 input parameters)
  Name: rlDisableVertexBuffer
  Return type: void
  Description: Disable vertex buffer (VBO)
  No input parameters
Function 029: rlEnableVertexBufferElement() (1 input parameters)
  Name: rlEnableVertexBufferElement
  Return type: void
  Description: Enable vertex buffer element (VBO element)
  Param[1]: id (type: unsigned int)
Function 030: rlDisableVertexBufferElement() (0 input parameters)
  Name: rlDisableVertexBufferElement
  Return type: void
  Description: Disable vertex buffer element (VBO element)
  No input parameters
Function 031: rlEnableVertexAttribute() (1 input parameters)
  Name: rlEnableVertexAttribute
  Return type: void
  Description: Enable vertex attribute index
  Param[1]: index (type: unsigned int)
Function 032: rlDisableVertexAttribute() (1 input parameters)
  Name: rlDisableVertexAttribute
  Return type: void
  Description: Disable vertex attribute index
  Param[1]: index (type: unsigned int)
Function 033: rlEnableStatePointer() (2 input parameters)
  Name: rlEnableStatePointer
  Return type: void
  Description: Enable attribute state pointer
  Param[1]: vertexAttribType (type: int)
  Param[2]: buffer (type: void *)
Function 034: rlDisableStatePointer() (1 input parameters)
  Name: rlDisableStatePointer
  Return type: void
  Description: Disable attribute state pointer
  Param[1]: vertexAttribType (type: int)
Function 035: rlActiveTextureSlot() (1 input parameters)
  Name: rlActiveTextureSlot
  Return type: void
  Description: Select and active a texture slot
  Param[1]: slot (type: int)
Function 036: rlEnableTexture() (1 input parameters)
  Name: rlEnableTexture
  Return type: void
  Description: Enable texture
  Param[1]: id (type: unsigned int)
Function 037: rlDisableTexture() (0 input parameters)
  Name: rlDisableTexture
  Return type: void
  Description: Disable texture
  No input parameters
Function 038: rlEnableTextureCubemap() (1 input parameters)
  Name: rlEnableTextureCubemap
  Return type: void
  Description: Enable texture cubemap
  Param[1]: id (type: unsigned int)
Function 039: rlDisableTextureCubemap() (0 input parameters)
  Name: rlDisableTextureCubemap
  Return type: void
  Description: Disable texture cubemap
  No input parameters
Function 040: rlTextureParameters() (3 input parameters)
  Name: rlTextureParameters
  Return type: void
  Description: Set texture parameters (filter, wrap)
  Param[1]: id (type: unsigned int)
  Param[2]: param (type: int)
  Param[3]: value (type: int)
Function 041: rlCubemapParameters() (3 input parameters)
  Name: rlCubemapParameters
  Return type: void
  Description: Set cubemap parameters (filter, wrap)
  Param[1]: id (type: unsigned int)
  Param[2]: param (type: int)
  Param[3]: value (type: int)
Function 042: rlEnableShader() (1 input parameters)
  Name: rlEnableShader
  Return type: void
  Description: Enable shader program
  Param[1]: id (type: unsigned int)
Function 043: rlDisableShader() (0 input parameters)
  Name: rlDisableShader
  Return type: void
  Description: Disable shader program
  No input parameters
Function 044: rlEnableFramebuffer() (1 input parameters)
  Name: rlEnableFramebuffer
  Return type: void
  Description: Enable render texture (fbo)
  Param[1]: id (type: unsigned int)
Function 045: rlDisableFramebuffer() (0 input parameters)
  Name: rlDisableFramebuffer
  Return type: void
  Description: Disable render texture (fbo), return to default framebuffer
  No input parameters
Function 046: rlGetActiveFramebuffer() (0 input parameters)
  Name: rlGetActiveFramebuffer
  Return type: unsigned int
  Description: Get the currently active render texture (fbo), 0 for default framebuffer
  No input parameters
Function 047: rlActiveDrawBuffers() (1 input parameters)
  Name: rlActiveDrawBuffers
  Return type: void
  Description: Activate multiple draw color buffers
  Param[1]: count (type: int)
Function 048: rlBlitFramebuffer() (9 input parameters)
  Name: rlBlitFramebuffer
  Return type: void
  Description: Blit active framebuffer to main framebuffer
  Param[1]: srcX (type: int)
  Param[2]: srcY (type: int)
  Param[3]: srcWidth (type: int)
  Param[4]: srcHeight (type: int)
  Param[5]: dstX (type: int)
  Param[6]: dstY (type: int)
  Param[7]: dstWidth (type: int)
  Param[8]: dstHeight (type: int)
  Param[9]: bufferMask (type: int)
Function 049: rlBindFramebuffer() (2 input parameters)
  Name: rlBindFramebuffer
  Return type: void
  Description: Bind framebuffer (FBO)
  Param[1]: target (type: unsigned int)
  Param[2]: framebuffer (type: unsigned int)
Function 050: rlEnableColorBlend() (0 input parameters)
  Name: rlEnableColorBlend
  Return type: void
  Description: Enable color blending
  No input parameters
Function 051: rlDisableColorBlend() (0 input parameters)
  Name: rlDisableColorBlend
  Return type: void
  Description: Disable color blending
  No input parameters
Function 052: rlEnableDepthTest() (0 input parameters)
  Name: rlEnableDepthTest
  Return type: void
  Description: Enable depth test
  No input parameters
Function 053: rlDisableDepthTest() (0 input parameters)
  Name: rlDisableDepthTest
  Return type: void
  Description: Disable depth test
  No input parameters
Function 054: rlEnableDepthMask() (0 input parameters)
  Name: rlEnableDepthMask
  Return type: void
  Description: Enable depth write
  No input parameters
Function 055: rlDisableDepthMask() (0 input parameters)
  Name: rlDisableDepthMask
  Return type: void
  Description: Disable depth write
  No input parameters
Function 056: rlEnableBackfaceCulling() (0 input parameters)
  Name: rlEnableBackfaceCulling
  Return type: void
  Description: Enable backface culling
  No input parameters
Function 057: rlDisableBackfaceCulling() (0 input parameters)
  Name: rlDisableBackfaceCulling
  Return type: void
  Description: Disable backface culling
  No input parameters
Function 058: rlColorMask() (4 input parameters)
  Name: rlColorMask
  Return type: void
  Description: Color mask control
  Param[1]: r (type: bool)
  Param[2]: g (type: bool)
  Param[3]: b (type: bool)
  Param[4]: a (type: bool)
Function 059: rlSetCullFace() (1 input parameters)
  Name: rlSetCullFace
  Return type: void
  Description: Set face culling mode
  Param[1]: mode (type: int)
Function 060: rlEnableScissorTest() (0 input parameters)
  Name: rlEnableScissorTest
  Return type: void
  Description: Enable scissor test
  No input parameters
Function 061: rlDisableScissorTest() (0 input parameters)
  Name: rlDisableScissorTest
  Return type: void
  Description: Disable scissor test
  No input parameters
Function 062: rlScissor() (4 input parameters)
  Name: rlScissor
  Return type: void
  Description: Scissor test
  Param[1]: x (type: int)
  Param[2]: y (type: int)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
Function 063: rlEnableWireMode() (0 input parameters)
  Name: rlEnableWireMode
  Return type: void
  Description: Enable wire mode
  No input parameters
Function 064: rlEnablePointMode() (0 input parameters)
  Name: rlEnablePointMode
  Return type: void
  Description: Enable point mode
  No input parameters
Function 065: rlDisableWireMode() (0 input parameters)
  Name: rlDisableWireMode
  Return type: void
  Description: Disable wire (and point) mode
  No input parameters
Function 066: rlSetLineWidth() (1 input parameters)
  Name: rlSetLineWidth
  Return type: void
  Description: Set the line drawing width
  Param[1]: width (type: float)
Function 067: rlGetLineWidth() (0 input parameters)
  Name: rlGetLineWidth
  Return type: float
  Description: Get the line drawing width
  No input parameters
Function 068: rlEnableSmoothLines() (0 input parameters)
  Name: rlEnableSmoothLines
  Return type: void
  Description: Enable line aliasing
  No input parameters
Function 069: rlDisableSmoothLines() (0 input parameters)
  Name: rlDisableSmoothLines
  Return type: void
  Description: Disable line aliasing
  No input parameters
Function 070: rlEnableStereoRender() (0 input parameters)
  Name: rlEnableStereoRender
  Return type: void
  Description: Enable stereo rendering
  No input parameters
Function 071: rlDisableStereoRender() (0 input parameters)
  Name: rlDisableStereoRender
  Return type: void
  Description: Disable stereo rendering
  No input parameters
Function 072: rlIsStereoRenderEnabled() (0 input parameters)
  Name: rlIsStereoRenderEnabled
  Return type: bool
  Description: Check if stereo render is enabled
  No input parameters
Function 073: rlClearColor() (4 input parameters)
  Name: rlClearColor
  Return type: void
  Description: Clear color buffer with color
  Param[1]: r (type: unsigned char)
  Param[2]: g (type: unsigned char)
  Param[3]: b (type: unsigned char)
  Param[4]: a (type: unsigned char)
Function 074: rlClearScreenBuffers() (0 input parameters)
  Name: rlClearScreenBuffers
  Return type: void
  Description: Clear used screen buffers (color and depth)
  No input parameters
Function 075: rlCheckErrors() (0 input parameters)
  Name: rlCheckErrors
  Return type: void
  Description: Check and log OpenGL error codes
  No input parameters
Function 076: rlSetBlendMode() (1 input parameters)
  Name: rlSetBlendMode
  Return type: void
  Description: Set blending mode
  Param[1]: mode (type: int)
Function 077: rlSetBlendFactors() (3 input parameters)
  Name: rlSetBlendFactors
  Return type: void
  Description: Set blending mode factor and equation (using OpenGL factors)
  Param[1]: glSrcFactor (type: int)
  Param[2]: glDstFactor (type: int)
  Param[3]: glEquation (type: int)
Function 078: rlSetBlendFactorsSeparate() (6 input parameters)
  Name: rlSetBlendFactorsSeparate
  Return type: void
  Description: Set blending mode factors and equations separately (using OpenGL factors)
  Param[1]: glSrcRGB (type: int)
  Param[2]: glDstRGB (type: int)
  Param[3]: glSrcAlpha (type: int)
  Param[4]: glDstAlpha (type: int)
  Param[5]: glEqRGB (type: int)
  Param[6]: glEqAlpha (type: int)
Function 079: rlglInit() (2 input parameters)
  Name: rlglInit
  Return type: void
  Description: Initialize rlgl (buffers, shaders, textures, states)
  Param[1]: width (type: int)
  Param[2]: height (type: int)
Function 080: rlglClose() (0 input parameters)
  Name: rlglClose
  Return type: void
  Description: De-initialize rlgl (buffers, shaders, textures)
  No input parameters
Function 081: rlLoadExtensions() (1 input parameters)
  Name: rlLoadExtensions
  Return type: void
  Description: Load OpenGL extensions (loader function required)
  Param[1]: loader (type: void *)
Function 082: rlGetVersion() (0 input parameters)
  Name: rlGetVersion
  Return type: int
  Description: Get current OpenGL version
  No input parameters
Function 083: rlSetFramebufferWidth() (1 input parameters)
  Name: rlSetFramebufferWidth
  Return type: void
  Description: Set current framebuffer width
  Param[1]: width (type: int)
Function 084: rlGetFramebufferWidth() (0 input parameters)
  Name: rlGetFramebufferWidth
  Return type: int
  Description: Get default framebuffer width
  No input parameters
Function 085: rlSetFramebufferHeight() (1 input parameters)
  Name: rlSetFramebufferHeight
  Return type: void
  Description: Set current framebuffer height
  Param[1]: height (type: int)
Function 086: rlGetFramebufferHeight() (0 input parameters)
  Name: rlGetFramebufferHeight
  Return type: int
  Description: Get default framebuffer height
  No input parameters
Function 087: rlGetTextureIdDefault() (0 input parameters)
  Name: rlGetTextureIdDefault
  Return type: unsigned int
  Description: Get default texture id
  No input parameters
Function 088: rlGetShaderIdDefault() (0 input parameters)
  Name: rlGetShaderIdDefault
  Return type: unsigned int
  Description: Get default shader id
  No input parameters
Function 089: rlGetShaderLocsDefault() (0 input parameters)
  Name: rlGetShaderLocsDefault
  Return type: int *
  Description: Get default shader locations
  No input parameters
Function 090: rlLoadRenderBatch() (2 input parameters)
  Name: rlLoadRenderBatch
  Return type: rlRenderBatch
  Description: Load a render batch system
  Param[1]: numBuffers (type: int)
  Param[2]: bufferElements (type: int)
Function 091: rlUnloadRenderBatch() (1 input parameters)
  Name: rlUnloadRenderBatch
  Return type: void
  Description: Unload render batch system
  Param[1]: batch (type: rlRenderBatch)
Function 092: rlDrawRenderBatch() (1 input parameters)
  Name: rlDrawRenderBatch
  Return type: void
  Description: Draw render batch data (Update->Draw->Reset)
  Param[1]: batch (type: rlRenderBatch *)
Function 093: rlSetRenderBatchActive() (1 input parameters)
  Name: rlSetRenderBatchActive
  Return type: void
  Description: Set the active render batch for rlgl (NULL for default internal)
  Param[1]: batch (type: rlRenderBatch *)
Function 094: rlDrawRenderBatchActive() (0 input parameters)
  Name: rlDrawRenderBatchActive
  Return type: void
  Description: Update and draw internal render batch
  No input parameters
Function 095: rlCheckRenderBatchLimit() (1 input parameters)
  Name: rlCheckRenderBatchLimit
  Return type: bool
  Description: Check internal buffer overflow for a given number of vertex
  Param[1]: vCount (type: int)
Function 096: rlSetTexture() (1 input parameters)
  Name: rlSetTexture
  Return type: void
  Description: Set current texture for render batch and check buffers limits
  Param[1]: id (type: unsigned int)
Function 097: rlLoadVertexArray() (0 input parameters)
  Name: rlLoadVertexArray
  Return type: unsigned int
  Description: Load vertex array (vao) if supported
  No input parameters
Function 098: rlLoadVertexBuffer() (3 input parameters)
  Name: rlLoadVertexBuffer
  Return type: unsigned int
  Description: Load a vertex buffer object
  Param[1]: buffer (type: const void *)
  Param[2]: size (type: int)
  Param[3]: dynamic (type: bool)
Function 099: rlLoadVertexBufferElement() (3 input parameters)
  Name: rlLoadVertexBufferElement
  Return type: unsigned int
  Description: Load vertex buffer elements object
  Param[1]: buffer (type: const void *)
  Param[2]: size (type: int)
  Param[3]: dynamic (type: bool)
Function 100: rlUpdateVertexBuffer() (4 input parameters)
  Name: rlUpdateVertexBuffer
  Return type: void
  Description: Update vertex buffer object data on GPU buffer
  Param[1]: bufferId (type: unsigned int)
  Param[2]: data (type: const void *)
  Param[3]: dataSize (type: int)
  Param[4]: offset (type: int)
Function 101: rlUpdateVertexBufferElements() (4 input parameters)
  Name: rlUpdateVertexBufferElements
  Return type: void
  Description: Update vertex buffer elements data on GPU buffer
  Param[1]: id (type: unsigned int)
  Param[2]: data (type: const void *)
  Param[3]: dataSize (type: int)
  Param[4]: offset (type: int)
Function 102: rlUnloadVertexArray() (1 input parameters)
  Name: rlUnloadVertexArray
  Return type: void
  Description: Unload vertex array (vao)
  Param[1]: vaoId (type: unsigned int)
Function 103: rlUnloadVertexBuffer() (1 input parameters)
  Name: rlUnloadVertexBuffer
  Return type: void
  Description: Unload vertex buffer object
  Param[1]: vboId (type: unsigned int)
Function 104: rlSetVertexAttribute() (6 input parameters)
  Name: rlSetVertexAttribute
  Return type: void
  Description: Set vertex attribute data configuration
  Param[1]: index (type: unsigned int)
  Param[2]: compSize (type: int)
  Param[3]: type (type: int)
  Param[4]: normalized (type: bool)
  Param[5]: stride (type: int)
  Param[6]: offset (type: int)
Function 105: rlSetVertexAttributeDivisor() (2 input parameters)
  Name: rlSetVertexAttributeDivisor
  Return type: void
  Description: Set vertex attribute data divisor
  Param[1]: index (type: unsigned int)
  Param[2]: divisor (type: int)
Function 106: rlSetVertexAttributeDefault() (4 input parameters)
  Name: rlSetVertexAttributeDefault
  Return type: void
  Description: Set vertex attribute default value, when attribute to provided
  Param[1]: locIndex (type: int)
  Param[2]: value (type: const void *)
  Param[3]: attribType (type: int)
  Param[4]: count (type: int)
Function 107: rlDrawVertexArray() (2 input parameters)
  Name: rlDrawVertexArray
  Return type: void
  Description: Draw vertex array (currently active vao)
  Param[1]: offset (type: int)
  Param[2]: count (type: int)
Function 108: rlDrawVertexArrayElements() (3 input parameters)
  Name: rlDrawVertexArrayElements
  Return type: void
  Description: Draw vertex array elements
  Param[1]: offset (type: int)
  Param[2]: count (type: int)
  Param[3]: buffer (type: const void *)
Function 109: rlDrawVertexArrayInstanced() (3 input parameters)
  Name: rlDrawVertexArrayInstanced
  Return type: void
  Description: Draw vertex array (currently active vao) with instancing
  Param[1]: offset (type: int)
  Param[2]: count (type: int)
  Param[3]: instances (type: int)
Function 110: rlDrawVertexArrayElementsInstanced() (4 input parameters)
  Name: rlDrawVertexArrayElementsInstanced
  Return type: void
  Description: Draw vertex array elements with instancing
  Param[1]: offset (type: int)
  Param[2]: count (type: int)
  Param[3]: buffer (type: const void *)
  Param[4]: instances (type: int)
Function 111: rlLoadTexture() (5 input parameters)
  Name: rlLoadTexture
  Return type: unsigned int
  Description: Load texture data
  Param[1]: data (type: const void *)
  Param[2]: width (type: int)
  Param[3]: height (type: int)
  Param[4]: format (type: int)
  Param[5]: mipmapCount (type: int)
Function 112: rlLoadTextureDepth() (3 input parameters)
  Name: rlLoadTextureDepth
  Return type: unsigned int
  Description: Load depth texture/renderbuffer (to be attached to fbo)
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: useRenderBuffer (type: bool)
Function 113: rlLoadTextureCubemap() (4 input parameters)
  Name: rlLoadTextureCubemap
  Return type: unsigned int
  Description: Load texture cubemap data
  Param[1]: data (type: const void *)
  Param[2]: size (type: int)
  Param[3]: format (type: int)
  Param[4]: mipmapCount (type: int)
Function 114: rlUpdateTexture() (7 input parameters)
  Name: rlUpdateTexture
  Return type: void
  Description: Update texture with new data on GPU
  Param[1]: id (type: unsigned int)
  Param[2]: offsetX (type: int)
  Param[3]: offsetY (type: int)
  Param[4]: width (type: int)
  Param[5]: height (type: int)
  Param[6]: format (type: int)
  Param[7]: data (type: const void *)
Function 115: rlGetGlTextureFormats() (4 input parameters)
  Name: rlGetGlTextureFormats
  Return type: void
  Description: Get OpenGL internal formats
  Param[1]: format (type: int)
  Param[2]: glInternalFormat (type: unsigned int *)
  Param[3]: glFormat (type: unsigned int *)
  Param[4]: glType (type: unsigned int *)
Function 116: rlGetPixelFormatName() (1 input parameters)
  Name: rlGetPixelFormatName
  Return type: const char *
  Description: Get name string for pixel format
  Param[1]: format (type: unsigned int)
Function 117: rlUnloadTexture() (1 input parameters)
  Name: rlUnloadTexture
  Return type: void
  Description: Unload texture from GPU memory
  Param[1]: id (type: unsigned int)
Function 118: rlGenTextureMipmaps() (5 input parameters)
  Name: rlGenTextureMipmaps
  Return type: void
  Description: Generate mipmap data for selected texture
  Param[1]: id (type: unsigned int)
  Param[2]: width (type: int)
  Param[3]: height (type: int)
  Param[4]: format (type: int)
  Param[5]: mipmaps (type: int *)
Function 119: rlReadTexturePixels() (4 input parameters)
  Name: rlReadTexturePixels
  Return type: void *
  Description: Read texture pixel data
  Param[1]: id (type: unsigned int)
  Param[2]: width (type: int)
  Param[3]: height (type: int)
  Param[4]: format (type: int)
Function 120: rlReadScreenPixels() (2 input parameters)
  Name: rlReadScreenPixels
  Return type: unsigned char *
  Description: Read screen pixel data (color buffer)
  Param[1]: width (type: int)
  Param[2]: height (type: int)
Function 121: rlLoadFramebuffer() (0 input parameters)
  Name: rlLoadFramebuffer
  Return type: unsigned int
  Description: Load an empty framebuffer
  No input parameters
Function 122: rlFramebufferAttach() (5 input parameters)
  Name: rlFramebufferAttach
  Return type: void
  Description: Attach texture/renderbuffer to a framebuffer
  Param[1]: fboId (type: unsigned int)
  Param[2]: texId (type: unsigned int)
  Param[3]: attachType (type: int)
  Param[4]: texType (type: int)
  Param[5]: mipLevel (type: int)
Function 123: rlFramebufferComplete() (1 input parameters)
  Name: rlFramebufferComplete
  Return type: bool
  Description: Verify framebuffer is complete
  Param[1]: id (type: unsigned int)
Function 124: rlUnloadFramebuffer() (1 input parameters)
  Name: rlUnloadFramebuffer
  Return type: void
  Description: Delete framebuffer from GPU
  Param[1]: id (type: unsigned int)
Function 125: rlLoadShaderCode() (2 input parameters)
  Name: rlLoadShaderCode
  Return type: unsigned int
  Description: Load shader from code strings
  Param[1]: vsCode (type: const char *)
  Param[2]: fsCode (type: const char *)
Function 126: rlCompileShader() (2 input parameters)
  Name: rlCompileShader
  Return type: unsigned int
  Description: Compile custom shader and return shader id (type: RL_VERTEX_SHADER, RL_FRAGMENT_SHADER, RL_COMPUTE_SHADER)
  Param[1]: shaderCode (type: const char *)
  Param[2]: type (type: int)
Function 127: rlLoadShaderProgram() (2 input parameters)
  Name: rlLoadShaderProgram
  Return type: unsigned int
  Description: Load custom shader program
  Param[1]: vShaderId (type: unsigned int)
  Param[2]: fShaderId (type: unsigned int)
Function 128: rlUnloadShaderProgram() (1 input parameters)
  Name: rlUnloadShaderProgram
  Return type: void
  Description: Unload shader program
  Param[1]: id (type: unsigned int)
Function 129: rlGetLocationUniform() (2 input parameters)
  Name: rlGetLocationUniform
  Return type: int
  Description: Get shader location uniform
  Param[1]: shaderId (type: unsigned int)
  Param[2]: uniformName (type: const char *)
Function 130: rlGetLocationAttrib() (2 input parameters)
  Name: rlGetLocationAttrib
  Return type: int
  Description: Get shader location attribute
  Param[1]: shaderId (type: unsigned int)
  Param[2]: attribName (type: const char *)
Function 131: rlSetUniform() (4 input parameters)
  Name: rlSetUniform
  Return type: void
  Description: Set shader value uniform
  Param[1]: locIndex (type: int)
  Param[2]: value (type: const void *)
  Param[3]: uniformType (type: int)
  Param[4]: count (type: int)
Function 132: rlSetUniformMatrix() (2 input parameters)
  Name: rlSetUniformMatrix
  Return type: void
  Description: Set shader value matrix
  Param[1]: locIndex (type: int)
  Param[2]: mat (type: Matrix)
Function 133: rlSetUniformMatrices() (3 input parameters)
  Name: rlSetUniformMatrices
  Return type: void
  Description: Set shader value matrices
  Param[1]: locIndex (type: int)
  Param[2]: mat (type: const Matrix *)
  Param[3]: count (type: int)
Function 134: rlSetUniformSampler() (2 input parameters)
  Name: rlSetUniformSampler
  Return type: void
  Description: Set shader value sampler
  Param[1]: locIndex (type: int)
  Param[2]: textureId (type: unsigned int)
Function 135: rlSetShader() (2 input parameters)
  Name: rlSetShader
  Return type: void
  Description: Set shader currently active (id and locations)
  Param[1]: id (type: unsigned int)
  Param[2]: locs (type: int *)
Function 136: rlLoadComputeShaderProgram() (1 input parameters)
  Name: rlLoadComputeShaderProgram
  Return type: unsigned int
  Description: Load compute shader program
  Param[1]: shaderId (type: unsigned int)
Function 137: rlComputeShaderDispatch() (3 input parameters)
  Name: rlComputeShaderDispatch
  Return type: void
  Description: Dispatch compute shader (equivalent to *draw* for graphics pipeline)
  Param[1]: groupX (type: unsigned int)
  Param[2]: groupY (type: unsigned int)
  Param[3]: groupZ (type: unsigned int)
Function 138: rlLoadShaderBuffer() (3 input parameters)
  Name: rlLoadShaderBuffer
  Return type: unsigned int
  Description: Load shader storage buffer object (SSBO)
  Param[1]: size (type: unsigned int)
  Param[2]: data (type: const void *)
  Param[3]: usageHint (type: int)
Function 139: rlUnloadShaderBuffer() (1 input parameters)
  Name: rlUnloadShaderBuffer
  Return type: void
  Description: Unload shader storage buffer object (SSBO)
  Param[1]: ssboId (type: unsigned int)
Function 140: rlUpdateShaderBuffer() (4 input parameters)
  Name: rlUpdateShaderBuffer
  Return type: void
  Description: Update SSBO buffer data
  Param[1]: id (type: unsigned int)
  Param[2]: data (type: const void *)
  Param[3]: dataSize (type: unsigned int)
  Param[4]: offset (type: unsigned int)
Function 141: rlBindShaderBuffer() (2 input parameters)
  Name: rlBindShaderBuffer
  Return type: void
  Description: Bind SSBO buffer
  Param[1]: id (type: unsigned int)
  Param[2]: index (type: unsigned int)
Function 142: rlReadShaderBuffer() (4 input parameters)
  Name: rlReadShaderBuffer
  Return type: void
  Description: Read SSBO buffer data (GPU->CPU)
  Param[1]: id (type: unsigned int)
  Param[2]: dest (type: void *)
  Param[3]: count (type: unsigned int)
  Param[4]: offset (type: unsigned int)
Function 143: rlCopyShaderBuffer() (5 input parameters)
  Name: rlCopyShaderBuffer
  Return type: void
  Description: Copy SSBO data between buffers
  Param[1]: destId (type: unsigned int)
  Param[2]: srcId (type: unsigned int)
  Param[3]: destOffset (type: unsigned int)
  Param[4]: srcOffset (type: unsigned int)
  Param[5]: count (type: unsigned int)
Function 144: rlGetShaderBufferSize() (1 input parameters)
  Name: rlGetShaderBufferSize
  Return type: unsigned int
  Description: Get SSBO buffer size
  Param[1]: id (type: unsigned int)
Function 145: rlBindImageTexture() (4 input parameters)
  Name: rlBindImageTexture
  Return type: void
  Description: Bind image texture
  Param[1]: id (type: unsigned int)
  Param[2]: index (type: unsigned int)
  Param[3]: format (type: int)
  Param[4]: readonly (type: bool)
Function 146: rlGetMatrixModelview() (0 input parameters)
  Name: rlGetMatrixModelview
  Return type: Matrix
  Description: Get internal modelview matrix
  No input parameters
Function 147: rlGetMatrixProjection() (0 input parameters)
  Name: rlGetMatrixProjection
  Return type: Matrix
  Description: Get internal projection matrix
  No input parameters
Function 148: rlGetMatrixTransform() (0 input parameters)
  Name: rlGetMatrixTransform
  Return type: Matrix
  Description: Get internal accumulated transform matrix
  No input parameters
Function 149: rlGetMatrixProjectionStereo() (1 input parameters)
  Name: rlGetMatrixProjectionStereo
  Return type: Matrix
  Description: Get internal projection matrix for stereo render (selected eye)
  Param[1]: eye (type: int)
Function 150: rlGetMatrixViewOffsetStereo() (1 input parameters)
  Name: rlGetMatrixViewOffsetStereo
  Return type: Matrix
  Description: Get internal view offset matrix for stereo render (selected eye)
  Param[1]: eye (type: int)
Function 151: rlSetMatrixProjection() (1 input parameters)
  Name: rlSetMatrixProjection
  Return type: void
  Description: Set a custom projection matrix (replaces internal projection matrix)
  Param[1]: proj (type: Matrix)
Function 152: rlSetMatrixModelview() (1 input parameters)
  Name: rlSetMatrixModelview
  Return type: void
  Description: Set a custom modelview matrix (replaces internal modelview matrix)
  Param[1]: view (type: Matrix)
Function 153: rlSetMatrixProjectionStereo() (2 input parameters)
  Name: rlSetMatrixProjectionStereo
  Return type: void
  Description: Set eyes projection matrices for stereo rendering
  Param[1]: right (type: Matrix)
  Param[2]: left (type: Matrix)
Function 154: rlSetMatrixViewOffsetStereo() (2 input parameters)
  Name: rlSetMatrixViewOffsetStereo
  Return type: void
  Description: Set eyes view offsets matrices for stereo rendering
  Param[1]: right (type: Matrix)
  Param[2]: left (type: Matrix)
Function 155: rlLoadDrawCube() (0 input parameters)
  Name: rlLoadDrawCube
  Return type: void
  Description: Load and draw a cube
  No input parameters
Function 156: rlLoadDrawQuad() (0 input parameters)
  Name: rlLoadDrawQuad
  Return type: void
  Description: Load and draw a quad
  No input parameters
